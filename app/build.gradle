apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion Integer.parseInt(project.compile_Sdk_Version)
    buildToolsVersion project.build_Tools_Version

    defaultConfig {
        applicationId project.applicationId
        minSdkVersion Integer.parseInt(project.min_Sdk_Version)
        targetSdkVersion Integer.parseInt(project.target_Sdk_Version)
        versionCode Integer.parseInt(project.version_code)
        versionName project.version_Name
        //dex突破65536的限制
        multiDexEnabled true
        //默认是umeng的渠道
//        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "umeng"]
    }
    //跳过lint检查
    lintOptions {
        abortOnError false
    }

    //签名配置
    signingConfigs {
        debug {
            storeFile file("keystore/alfred.jks")
            storePassword "Alfred0728"
            keyPassword "Alfred0728"
            keyAlias "ChangSpring"
        }

        release {
            storeFile file("keystore/alfred.jks")
            storePassword "Alfred0728"
            keyPassword "Alfred0728"
            keyAlias "ChangSpring"
        }
    }

    //友盟多渠道打包
//    productFlavors {
//        defa {
//            applicationId "com.alfred.study"
//        }
//        baidu {
//            applicationId "com.alfred.study.baidu"
//
//        }
//        xiaomi {
//            applicationId "com.alfred.study.xiaomi"
//        }
//    }
//    //遍历productFlavors所有的渠道包
//    productFlavors.all {
//        productFlavors -> productFlavors.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//    }

    buildTypes {
        debug {
            //什么意思?
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug

            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "String", "BUGLY_APP_ID", project.bugly_app_id
            buildConfigField "String", "THINKER_PATCH_APP_KEY", project.tinker_path_app_key
            buildConfigField "String", "THINKER_PATCH_APP_VERSION", project.tinker_id
        }

        release {
            //是否混淆代码
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled true
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources true
            signingConfig signingConfigs.release
//            applicationVariants.all { applicationVariants ->
//                applicationVariants.outputs.each { output ->
//                    def outputFile = output.outputFile
//                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        //输出apk的名称为
//                        def fileName = "${defaultConfig.applicationId}_v${defaultConfig.versionName}_${releaseTime()}_${applicationVariants.productFlavors[0].name}.apk"
//                        output.outputFile = new File(outputFile.parent, fileName)
//                    }
//
//                }
//
//            }

            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "String", "BUGLY_APP_ID", project.bugly_app_id
            buildConfigField "String", "THINKER_PATCH_APP_KEY", project.tinker_path_app_key
            buildConfigField "String", "THINKER_PATCH_APP_VERSION", project.tinker_id
        }
    }
}

def bakPath = file("${buildDir}/bakApk/")
/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    // for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    // 使用tinker，将不能使用 instant run
    //开启tink_support插件
    tinkerEnabled = false

    // for normal build
    // 打补丁包时必选,基准包路径
    tinkerOldApkPath = "${bakPath}/app-release-1124-23-03-52.apk"
//    // proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakPath}/app-release-1124-23-03-52-mapping.txt"
//    // resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakPath}/app-release-1124-23-03-52-R.txt"
//
//    // only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${bakPath}/app-release-1124-23-03-52"
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

/**
 * 更多Tinker插件详细的配置，参考：https://github.com/Tencent/tinker/wiki
 */
if (buildWithTinker()) {
    // 依赖tinker插件
    apply plugin: 'com.tencent.tinker.patch'
    apply plugin: 'com.tencent.bugly.tinker-support'

    tinkerSupport {
    }

    // 全局信息相关配置项 参考 https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97
    tinkerPatch {
        //打补丁包时必选，基准包路径
        oldApk = getOldApkPath()
        // 可选，默认false
        ignoreWarning = false
        // 可选，默认true， 验证基准apk和patch签名是否一致
        useSign = true
        // 编译相关配置项
        buildConfig {
            // 可选，设置mapping文件，建议保持旧apk的proguard混淆方式
            applyMapping = getApplyMappingPath()
            // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配
            applyResourceMapping = getApplyResourceMappingPath()
            // 必选，当前版本的唯一标识，可以是git版本号、versionName
            tinkerId = project.tinker_id
        }

        // dex相关配置项
        dex {
            // 可选，默认为jar
            dexMode = "jar"
            // 可选，默认为false
            usePreGeneratedPatchDex = true
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            // 必选
            loader = ["com.tencent.tinker.loader.*",
                    //TODO warning, you must change it with your application
                      "com.alfred.study.ui.AlfredApplication"
            ]
        }

        // lib相关的配置项
        lib {
            pattern = ["lib/armeabi/*.so"]
        }

        // res相关的配置项
        res {
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
            ignoreChange = ["assets/sample_meta.txt"]
            largeModSize = 100
        }

        // 用于生成补丁包中的'package_meta.txt'文件
        packageConfig {
            configField("patchMessage", "tinker is sample to use")

            configField("platform", "all")

            configField("patchVersion", "1.0.1")
        }

        // 7zip路径配置项，执行前提是useSign为true
        sevenZip {
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10" // optional
            //  path = "/usr/local/bin/7za" // optional
        }
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.android.support:recyclerview-v7:23.4.0'
    compile 'com.android.support:cardview-v7:23.4.0'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.squareup.retrofit2:retrofit:2.0.0'
    compile 'com.squareup.retrofit2:converter-gson:2.0.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    // 多dex配置
    compile 'com.android.support:multidex:1.0.1'
}
